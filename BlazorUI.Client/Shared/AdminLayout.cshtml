@inherits BlazorLayoutComponent
@inject AppState State

<div class="app header-fixed sidebar-fixed aside-menu-fixed @BodySidebarLgClass @BodySidebarClass @BodySidebarMinimizeClass">
    <AppHeader onSidebarToggle=@ToggleSidebar></AppHeader>

    <div class="app-body">
        <div class="sidebar">

            <Sidebar DataSource=@State.LoadSidebar()></Sidebar>
            <button class="sidebar-minimizer brand-minimizer" type="button" onclick=@ToggleMinimize></button>
        </div>
        <main class="main">
            <Breadcrumb></Breadcrumb>
            <div class="container-fluid">
                <div class="ui-view">
                    <div>
                        @Body
                    </div>
                </div>
            </div>
        </main>
    </div>
    <footer class="app-footer">
        <div>
            <a href="https://coreui.io">CoreUI</a>
            <span>&copy; 2018 creativeLabs.</span>
        </div>
        <div class="ml-auto">
            <span>Powered by</span>
            <a href="https://coreui.io">CoreUI</a>
        </div>
    </footer>
</div>
@functions {

    private bool isMinimize { get; set; } = false;

    public string BodySidebarMinimizeClass = "";
    internal void ToggleMinimize()
    {
        isMinimize = !isMinimize;

        BodySidebarMinimizeClass = isMinimize ? "brand-minimized sidebar-minimized" : "";
    }

    public string BodySidebarClass = "";
    public string BodySidebarLgClass = "sidebar-lg-show";
    public void ToggleSidebar(string type, bool isVisible)
    {
        Console.WriteLine(type);

        switch (type)
        {
            case "lg":
                BodySidebarLgClass = isVisible ? "sidebar-lg-show" : "";
                break;
            default:
                BodySidebarClass = isVisible ? "sidebar-show" : "";
                break;
        }

        StateHasChanged();
    }
}